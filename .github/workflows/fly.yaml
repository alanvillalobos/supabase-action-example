name: Fly Preview

on:
  pull_request:

jobs:
  preview:
    runs-on: ubuntu-latest
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_ORGANIZATION_SLUG: supabase-dev
      # Specifies the base project to branch from
      PROJECT_REF: qiao-all-in-one
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - run: |
          supabase gen keys --project-ref cimpzzikygouamvsjwxa --experimental >> "$GITHUB_ENV"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      - id: deployment
        uses: sweatybridge/fly-preview@main
        env:
          DB_ONLY: true
      - run: |
          body="Status: [Deploying](https://fly.io/apps/$PROJECT_REF-${{ github.head_ref }}) ($(date))"
          exit_code=0
          gh issue comment ${{ github.event.number }} --edit-last -b "$body" || exit_code=$?
          if [[ "$exit_code" -gt 0 ]]; then
            gh issue comment ${{ github.event.number }} -b "$body"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: |
          for i in {1..60}; do
            status=$(flyctl m list -a "$PROJECT_REF-${{ github.head_ref }}" --json | jq -r 'map(.checks)[0][0].status') || true
            if [ "$status" == 'passing' ]; then
              break
            fi
            echo "project not ready: $status"
            sleep 2
          done
      - run: |
          body="Status: [Ready](https://fly.io/apps/$PROJECT_REF-${{ github.head_ref }}) ($(date))
          $COMMENT_BODY"
          gh issue comment ${{ github.event.number }} --edit-last -b "$body"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: |2
            ```bash
                API URL: http://${{ steps.deployment.outputs.hostname }}
            GraphQL URL: http://${{ steps.deployment.outputs.hostname }}/graphql/v1
            ```
      - run: |
          supabase db push --db-url "postgres://postgres:$SUPABASE_DB_PASSWORD@${{ steps.deployment.outputs.hostname }}/postgres"
